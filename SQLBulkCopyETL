# ==========================================
# Modular CSV ETL Script for SQL Server with SQL Bulk Copy and Archiving
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing files to process
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable
$BatchSize = 1000
Add-Type -AssemblyName 'Microsoft.VisualBasic'

# ==========================================
# Function Definitions
# ==========================================

# Log a message to the database
function Log_Message {
    param ([string]$Message, [string]$PayorName = "")
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogQuery = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES ('$Timestamp', '$PayorName', '$Message');
"@
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $LogQuery -TrustServerCertificate
    } catch {
        Write-Host "Failed to log message to database: $_"
    }
}

# Fetch table mapping for a CSV file
function Get_TableMapping {
    param ([string]$SourceFileName)
    $Query = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    return Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $Query -TrustServerCertificate
}

# Fetch column mappings for a Payor
function Get_ColumnMappings {
    param ([string]$PayorName)
    $Query = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    return Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $Query -TrustServerCertificate
}

# Truncate a target table
function Truncate_Table {
    param ([string]$TargetTable)
    $Query = "TRUNCATE TABLE $TargetTable;"
    Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $Query -TrustServerCertificate
}

# Initialize SQL Bulk Copy
function Initialize_BulkCopy {
    param ([string]$TargetTable, [array]$Mappings, [string]$SourceFileName)
    $Connection = New-Object System.Data.SqlClient.SqlConnection
    $Connection.ConnectionString = "Server=$ServerName;Database=$Database;Integrated Security=True;TrustServerCertificate=True;"
    $Connection.Open()

    $BulkCopy = New-Object Data.SqlClient.SqlBulkCopy($Connection)
    $BulkCopy.DestinationTableName = $TargetTable
    $BulkCopy.BatchSize = $BatchSize

    $BulkCopy.ColumnMappings.Add("SourceFileName", "SourceFileName")
    foreach ($Mapping in $Mappings) {
        $BulkCopy.ColumnMappings.Add($Mapping.IncomingColumnName, $Mapping.StandardizedColumnName)
    }

    return @($BulkCopy, $Connection)
}

# Load CSV into a DataTable
function Load_CSV {
    param ([string]$FilePath, [string]$SourceFileName)
    $Parser = New-Object Microsoft.VisualBasic.FileIO.TextFieldParser($FilePath)
    $Parser.TextFieldType = [Microsoft.VisualBasic.FileIO.FieldType]::Delimited
    $Parser.SetDelimiters(',')

    $Headers = $Parser.ReadFields()
    $DataTable = New-Object System.Data.DataTable
    foreach ($Header in $Headers) {
        $Column = New-Object System.Data.DataColumn $Header
        $DataTable.Columns.Add($Column)
    }

    # Add SourceFileName column
    $SourceFileNameColumn = New-Object System.Data.DataColumn("SourceFileName")
    $DataTable.Columns.Add($SourceFileNameColumn)

    while (-not $Parser.EndOfData) {
        $Fields = $Parser.ReadFields()
        $Row = $DataTable.NewRow()
        $Row.ItemArray = $Fields
        $Row["SourceFileName"] = $SourceFileName
        $DataTable.Rows.Add($Row)
    }

    $Parser.Close()
    return $DataTable
}

# Archive a file
function Archive_File {
    param ([string]$FilePath, [string]$ArchiveBasePath, [string]$SourceFileName)
    $ArchivePath = Join-Path -Path $ArchiveBasePath -ChildPath (Get-Date -Format "yyyyMM")
    if (-not (Test-Path -Path $ArchivePath)) {
        New-Item -ItemType Directory -Path $ArchivePath | Out-Null
    }
    $ArchiveFilePath = Join-Path -Path $ArchivePath -ChildPath $SourceFileName
    Move-Item -Path $FilePath -Destination $ArchiveFilePath -Force
    return $ArchiveFilePath
}

# ==========================================
# Main ETL Process
# ==========================================

$Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
if ($Files.Count -eq 0) {
    Write-Host "No CSV files found in folder: $FolderPath"
    exit
}

foreach ($File in $Files) {
    $FilePath = $File.FullName
    $SourceFileName = $File.Name

    try {
        $TableMapping = Get_TableMapping -SourceFileName $SourceFileName
        if ($TableMapping.Count -eq 0) {
            Log_Message "No table mapping found for CSV file: $SourceFileName."
            continue
        }

        $PayorName = $TableMapping.PayorName
        $TargetTable = $TableMapping.TargetTable
        $ArchiveBasePath = $TableMapping.ArchivePath
        Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."

        Truncate_Table -TargetTable $TargetTable
        Log_Message "Staging table $TargetTable truncated successfully."

        $Mappings = Get_ColumnMappings -PayorName $PayorName
        if ($Mappings.Count -eq 0) {
            Log_Message "No column mappings found for PayorName: $PayorName."
            continue
        }

        Log_Message "Fetched column mappings successfully for PayorName: $PayorName."
        $CsvData = Load_CSV -FilePath $FilePath -SourceFileName $SourceFileName
        $BulkCopy, $SqlConnection = Initialize_BulkCopy -TargetTable $TargetTable -Mappings $Mappings -SourceFileName $SourceFileName

        $BulkCopy.WriteToServer($CsvData)
        Log_Message "Bulk copy completed for file: $SourceFileName."

        $BulkCopy.Close()
        $SqlConnection.Close()

        $ArchiveFilePath = Archive_File -FilePath $FilePath -ArchiveBasePath $ArchiveBasePath -SourceFileName $SourceFileName
        Log_Message "File archived successfully to: $ArchiveFilePath."

    } catch {
        Log_Message "Error processing file $SourceFileName : $_"
    } finally {
        if ($SqlConnection.State -eq [System.Data.ConnectionState]::Open) {
            $SqlConnection.Close()
        }
    }
}

Log_Message "CSV ETL process completed for all files in folder: $FolderPath."
