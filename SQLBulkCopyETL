# ==========================================
# Optimized CSV ETL Script for SQL Server
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing files to process
$ProcessedFolderPath = ""                     # Directory to move processed files
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable

# Function: Log a message to the database
function Log_Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogQuery = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES ('$Timestamp', '$PayorName', '$Message');
"@
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $LogQuery -TrustServerCertificate
    } catch {
        Write-Host "Failed to log message to database: $_"
    }
}

# Ensure the processed folder exists
if (-not (Test-Path -Path $ProcessedFolderPath)) {
    try {
        New-Item -ItemType Directory -Path $ProcessedFolderPath -Force | Out-Null
        Log_Message "Created processed folder: $ProcessedFolderPath."
    } catch {
        Log_Message "Failed to create processed folder: $ProcessedFolderPath : $_"
        exit
    }
}

# Process files in the folder
$Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
if ($Files.Count -eq 0) {
    Write-Host "No CSV files found in folder: $FolderPath"
    exit
}

foreach ($File in $Files) {
    $FilePath = $File.FullName
    $SourceFileName = $File.Name

    # Skip files that don't exist
    if (-not (Test-Path -Path $FilePath)) {
        Log_Message "File not found: $SourceFileName. Skipping."
        continue
    }

    # Fetch table mapping for CSV files only
    $TableMappingQuery = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    try {
        $TableMapping = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TableMappingQuery -TrustServerCertificate
        if ($TableMapping.Count -eq 0) {
            Log_Message "No table mapping found for CSV file: $SourceFileName."
            continue
        }
        $PayorName = $TableMapping.PayorName
        $TargetTable = $TableMapping.TargetTable
        $ArchiveBasePath = $TableMapping.ArchivePath
        Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."
    } catch {
        Log_Message "Failed to retrieve table mapping for CSV file: $SourceFileName : $_"
        continue
    }

    # Fetch column mappings
    $MappingQuery = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    try {
        $Mappings = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $MappingQuery -TrustServerCertificate
        if ($Mappings.Count -eq 0) {
            Log_Message "No column mappings found for PayorName: $PayorName."
            continue
        }
        Log_Message "Fetched column mappings successfully for PayorName: $PayorName."
    } catch {
        Log_Message "Failed to retrieve column mappings: $_"
        continue
    }

    # Pre-compute column indices based on header
    $Header = Get-Content -Path $FilePath -TotalCount 1 | ConvertFrom-Csv -Delimiter ',' | Get-Member -MemberType NoteProperty | Select-Object -ExpandProperty Name
    $ColumnIndexMap = @{}
    foreach ($Mapping in $Mappings) {
        $IncomingColumn = $Mapping.IncomingColumnName
        $StandardizedColumn = $Mapping.StandardizedColumnName

        try {
            $Index = [Array]::IndexOf($Header, $IncomingColumn)
            if ($Index -ge 0) {
                $ColumnIndexMap[$StandardizedColumn] = $Index
            } else {
                Log_Message "Column not found in header: $IncomingColumn"
            }
        } catch {
            Log_Message "Error mapping column $IncomingColumn for file $SourceFileName - $_ "
        }
    }

    # Add SourceFileName Manually
    $ColumnIndexMap["SourceFileName"] = $SourceFileName

    # Use SqlBulkCopy to stream rows into the database
    $ConnectionString = "Server=$ServerName;Database=$Database;Integrated Security=True;TrustServerCertificate=True;"
    try {
        $SqlBulkCopy = New-Object Data.SqlClient.SqlBulkCopy($ConnectionString, [Data.SqlClient.SqlBulkCopyOptions]::KeepIdentity)
        $SqlBulkCopy.DestinationTableName = $TargetTable
        $SqlBulkCopy.BatchSize = 10000

        # Map columns
        foreach ($Key in $ColumnIndexMap.Keys) {
            $SqlBulkCopy.ColumnMappings.Add($Key, $Key) | Out-Null
        }

        # Stream CSV rows and populate SqlBulkCopy
        $Stream = New-Object System.IO.StreamReader($FilePath)
        try {
            # Skip the header row
            $Stream.ReadLine() | Out-Null

            while (null -ne ($Line = $Stream.ReadLine())) {
                $Values = $Line -split ',' | ForEach-Object { $_.Trim('"') }
                $Row = @{}
                foreach ($Key in $ColumnIndexMap.Keys) {
                    $Index = $ColumnIndexMap[$Key]
                    $Row[$Key] = if ($Index -lt $Values.Count) { $Values[$Index] } else { $null }
                }
                $SqlBulkCopy.WriteToServer(@($Row))
            }
        } finally {
            $Stream.Close()
        }

        Log_Message "Data successfully inserted into $TargetTable using SqlBulkCopy."
    } catch {
        Log_Message "Failed to bulk insert data for file: $SourceFileName : $_"
        continue
    } finally {
        $SqlBulkCopy.Close()
    }

    # Move file to processed folder
    $ProcessedFilePath = Join-Path -Path $ProcessedFolderPath -ChildPath $SourceFileName
    try {
        Move-Item -Path $FilePath -Destination $ProcessedFilePath -Force
        Log_Message "File moved successfully to processed folder: $ProcessedFilePath."
    } catch {
        Log_Message "Failed to move file to processed folder: $SourceFileName : $_"
    }
}

# Final log
Log_Message "ETL process completed for all files in folder: $FolderPath."
