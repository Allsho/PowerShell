# ==========================================
# CSV ETL Script for SQL Server with SQL Bulk Copy and Archiving
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing CSV files to process
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable
$BatchSize = 1000                             # Maximum number of rows to insert per batch

# Function: Log a message to the database
function Log_Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogQuery = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES ('$Timestamp', '$PayorName', '$Message');
"@
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $LogQuery -TrustServerCertificate
    } catch {
        Write-Host "Failed to log message to database: $_"
    }
}

# Process files in the folder
$Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
if ($Files.Count -eq 0) {
    Write-Host "No CSV files found in folder: $FolderPath"
    exit
}

foreach ($File in $Files) {
    $FilePath = $File.FullName
    $SourceFileName = $File.Name

    # Fetch table mapping for CSV files
    $TableMappingQuery = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    try {
        $TableMapping = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TableMappingQuery -TrustServerCertificate
        if ($TableMapping.Count -eq 0) {
            Log_Message "No table mapping found for CSV file: $SourceFileName."
            continue
        }
        $PayorName = $TableMapping.PayorName
        $TargetTable = $TableMapping.TargetTable
        $ArchiveBasePath = $TableMapping.ArchivePath
        Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."
    } catch {
        Log_Message "Failed to retrieve table mapping for CSV file: $SourceFileName : $_"
        continue
    }

    # Truncate target table
    $TruncateQuery = "TRUNCATE TABLE $TargetTable;"
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TruncateQuery -TrustServerCertificate
        Log_Message "Staging table $TargetTable truncated successfully."
    } catch {
        Log_Message "Failed to truncate table $TargetTable : $_"
        continue
    }

    # Fetch column mappings
    $MappingQuery = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    try {
        $Mappings = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $MappingQuery -TrustServerCertificate
        if ($Mappings.Count -eq 0) {
            Log_Message "No column mappings found for PayorName: $PayorName."
            continue
        }
        Log_Message "Fetched column mappings successfully for PayorName: $PayorName."
    } catch {
        Log_Message "Failed to retrieve column mappings: $_"
        continue
    }

    # SQL Bulk Copy Initialization
    try {
        $SqlConnection = New-Object System.Data.SqlClient.SqlConnection
        $SqlConnection.ConnectionString = "Server=$ServerName;Database=$Database;Integrated Security=True;TrustServerCertificate=True;"
        $SqlConnection.Open()

        $BulkCopy = New-Object Data.SqlClient.SqlBulkCopy($SqlConnection)
        $BulkCopy.DestinationTableName = $TargetTable
        $BulkCopy.BatchSize = $BatchSize

        foreach ($Mapping in $Mappings) {
            $BulkCopy.ColumnMappings.Add($Mapping.IncomingColumnName, $Mapping.StandardizedColumnName)
        }

        # Load CSV data
        $DataTable = New-Object System.Data.DataTable
        $Reader = [System.IO.StreamReader]::new($FilePath)
        $HeaderLine = $Reader.ReadLine()
        $Headers = $HeaderLine -split ',' -replace '"', ''

        # Add Columns to DataTable
        foreach ($Header in $Headers) {
            $Column = New-Object System.Data.DataColumn
            $Column.ColumnName = $Header
            $DataTable.Columns.Add($Column)
        }

        # Read rows and populate DataTable
        while ($Reader.Peek() -ge 0) {
            $Row = $DataTable.NewRow()
            $Values = ($Reader.ReadLine() -split ',' -replace '"', '')
            for ($i = 0; $i -lt $Values.Length; $i++) {
                $Row[$i] = $Values[$i]
            }
            $DataTable.Rows.Add($Row)
        }
        $Reader.Close()

        # Write to SQL Server using Bulk Copy
        $BulkCopy.WriteToServer($DataTable)
        Log_Message "Bulk copy completed for file: $SourceFileName."

        $BulkCopy.Close()
        $SqlConnection.Close()
    } catch {
        Log_Message "Failed during SQL Bulk Copy for file: $SourceFileName : $_"
        Log_Message $Header
        continue
    }

    # Archive the file
    $ArchivePath = Join-Path -Path $ArchiveBasePath -ChildPath (Get-Date -Format "yyyyMM")
    if (-not (Test-Path -Path $ArchivePath)) {
        New-Item -ItemType Directory -Path $ArchivePath | Out-Null
    }
    $ArchiveFilePath = Join-Path -Path $ArchivePath -ChildPath $SourceFileName
    Move-Item -Path $FilePath -Destination $ArchiveFilePath -Force
    Log_Message "File archived successfully to: $ArchiveFilePath."
}

# Final log
Log_Message "CSV ETL process completed for all files in folder: $FolderPath."

# Preview Insert Statements
try {
    foreach ($Row in $DataTable.Rows) {
        $Columns = $Headers -join ", "  # Join header names for column list
        $Values = $Row.ItemArray | ForEach-Object { "'$($_.Replace("'", "''"))'" } -join ", "  # Escape single quotes and join values
        $InsertStatement = "INSERT INTO $TargetTable ($Columns) VALUES ($Values);"
        
        # Log or Output the Insert Statement
        Log_Message "Preview Insert: $InsertStatement"
        Write-Host "Preview Insert: $InsertStatement"
    }
} catch {
    Log_Message "Failed to generate INSERT statement for preview: $_"
    continue
}

