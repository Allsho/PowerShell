# ==========================================
# CSV ETL Script for SQL Server with Archiving and BCP
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing CSV files to process
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable
$BCPExecutable = "C:\\Program Files\\Microsoft SQL Server\\Client SDK\\ODBC\\170\\Tools\\Binn\\bcp.exe"  # Path to BCP executable

# Function: Log a message to the database
function Log_Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogQuery = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES ('$Timestamp', '$PayorName', '$Message');
"@
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $LogQuery -TrustServerCertificate
    } catch {
        Write-Host "Failed to log message to database: $_"
    }
}

# Process files in the folder
$Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
if ($Files.Count -eq 0) {
    Write-Host "No CSV files found in folder: $FolderPath"
    exit
}

foreach ($File in $Files) {
    $FilePath = $File.FullName
    $SourceFileName = $File.Name

    # Fetch table mapping for CSV files only
    $TableMappingQuery = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    try {
        $TableMapping = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TableMappingQuery -TrustServerCertificate
        if ($TableMapping.Count -eq 0) {
            Log_Message "No table mapping found for CSV file: $SourceFileName."
            continue
        }
        $PayorName = $TableMapping.PayorName
        $TargetTable = $TableMapping.TargetTable
        $ArchiveBasePath = $TableMapping.ArchivePath
        Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."
    } catch {
        Log_Message "Failed to retrieve table mapping for CSV file: $SourceFileName : $_"
        continue
    }

    # Determine archive folder path
    $CurrentYearMonth = (Get-Date).ToString("yyyyMM")
    $ArchivePath = Join-Path -Path $ArchiveBasePath -ChildPath $CurrentYearMonth

    # Create archive folder if it doesn't exist
    if (-not (Test-Path -Path $ArchivePath)) {
        try {
            New-Item -ItemType Directory -Path $ArchivePath -Force | Out-Null
            Log_Message "Created archive folder: $ArchivePath."
        } catch {
            Log_Message "Failed to create archive folder: $ArchivePath : $_"
            continue
        }
    }

    # Truncate target table
    $TruncateQuery = "TRUNCATE TABLE $TargetTable;"
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TruncateQuery -TrustServerCertificate
        Log_Message "Staging table $TargetTable truncated successfully."
    } catch {
        Log_Message "Failed to truncate table $TargetTable : $_"
        continue
    }

    # Fetch column mappings
    $MappingQuery = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    try {
        $Mappings = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $MappingQuery -TrustServerCertificate
        if ($Mappings.Count -eq 0) {
            Log_Message "No column mappings found for PayorName: $PayorName."
            continue
        }
        Log_Message "Fetched column mappings successfully for PayorName: $PayorName."
    } catch {
        Log_Message "Failed to retrieve column mappings: $_"
        continue
    }

    # Create a temporary transformed CSV file for BCP
    $TempFilePath = Join-Path -Path $FolderPath -ChildPath "$($SourceFileName).transformed.csv"
    try {
        $CsvContent = Import-Csv -Path $FilePath -Delimiter ','
        $TransformedData = @()

        foreach ($Row in $CsvContent) {
            $TransformedRow = @()
            foreach ($Mapping in $Mappings) {
                $Value = $Row.$($Mapping.IncomingColumnName) -replace "'", "''"
                $TransformedRow += $Value
            }
            $TransformedData += ($TransformedRow -join ',')
        }

        # Save transformed data to temporary file
        $TransformedData | Set-Content -Path $TempFilePath
        Log_Message "Transformed data saved to temporary file: $TempFilePath."
    } catch {
        Log_Message "Failed to transform data for file: $SourceFileName : $_"
        continue
    }

    # Use BCP to load data into the target table
    $BCPCommand = @"
    & "$BCPExecutable" "$TargetTable" IN "$TempFilePath" -c -t"," -S "$ServerName" -d "$Database" -T
"@
    try {
        Invoke-Expression -Command $BCPCommand
        Log_Message "Data successfully loaded into table: $TargetTable using BCP."
    } catch {
        Log_Message "BCP failed for file: $SourceFileName : $_"
        continue
    }

    # Cleanup temporary file
    Remove-Item -Path $TempFilePath -Force

    # Archive the file
    $ArchiveFilePath = Join-Path -Path $ArchivePath -ChildPath $SourceFileName
    try {
        Move-Item -Path $FilePath -Destination $ArchiveFilePath -Force
        Log_Message "File archived successfully to: $ArchiveFilePath."
    } catch {
        Log_Message "Failed to archive file: $SourceFileName to $ArchiveFilePath : $_"
    }
}

# Final log
Log_Message "CSV ETL process completed for all files in folder: $FolderPath."
