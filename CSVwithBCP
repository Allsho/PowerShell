# ==========================================
# Optimized CSV ETL Script for SQL Server with Archiving
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing CSV files to process
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable
$BatchSize = 100                              # Maximum number of rows to insert per query

# Function: Log a message to the database
function Log_Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogQuery = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES ('$Timestamp', '$PayorName', '$Message');
"@
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $LogQuery -TrustServerCertificate
    } catch {
        Write-Host "Failed to log message to database: $_"
    }
}

# Process files in the folder
$Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
if ($Files.Count -eq 0) {
    Write-Host "No CSV files found in folder: $FolderPath"
    exit
}

foreach ($File in $Files) {
    $FilePath = $File.FullName
    $SourceFileName = $File.Name

    # Fetch table mapping for the file
    $TableMappingQuery = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    try {
        $TableMapping = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TableMappingQuery -TrustServerCertificate
        if ($TableMapping.Count -eq 0) {
            Log_Message "No table mapping found for CSV file: $SourceFileName."
            continue
        }
        $PayorName = $TableMapping.PayorName
        $TargetTable = $TableMapping.TargetTable
        $ArchiveBasePath = $TableMapping.ArchivePath
        Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."
    } catch {
        Log_Message "Failed to retrieve table mapping for CSV file: $SourceFileName : $_"
        continue
    }

    # Create archive folder
    $ArchivePath = Join-Path -Path $ArchiveBasePath -ChildPath (Get-Date).ToString("yyyyMM")
    if (-not (Test-Path -Path $ArchivePath)) {
        try {
            New-Item -ItemType Directory -Path $ArchivePath -Force | Out-Null
            Log_Message "Created archive folder: $ArchivePath."
        } catch {
            Log_Message "Failed to create archive folder: $ArchivePath : $_"
            continue
        }
    }

    # Truncate target table
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query "TRUNCATE TABLE $TargetTable;" -TrustServerCertificate
        Log_Message "Staging table $TargetTable truncated successfully."
    } catch {
        Log_Message "Failed to truncate table $TargetTable : $_"
        continue
    }

    # Fetch column mappings
    $MappingQuery = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    try {
        $Mappings = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $MappingQuery -TrustServerCertificate
        if ($Mappings.Count -eq 0) {
            Log_Message "No column mappings found for PayorName: $PayorName."
            continue
        }
        Log_Message "Fetched column mappings successfully for PayorName: $PayorName."
    } catch {
        Log_Message "Failed to retrieve column mappings: $_"
        continue
    }

    # Build mapping dictionary
    $MappingDict = @{}
    $Mappings | ForEach-Object { $MappingDict[$_.IncomingColumnName] = $_.StandardizedColumnName }

    # Load CSV content
    try {
        $CsvContent = Import-Csv -Path $FilePath -Delimiter ','
        if ($CsvContent.Count -eq 0) {
            Log_Message "No data in file: $FilePath"
            continue
        }
        Log_Message "Loaded CSV file: $SourceFileName successfully with $($CsvContent.Count) rows."
    } catch {
        Log_Message "Failed to load CSV file: $SourceFileName : $_"
        continue
    }

    # Prepare headers and batch rows
    $ColumnHeaders = ($MappingDict.Values | ForEach-Object { "[$_]" }) -join ","
    $BatchRows = @()

    foreach ($Row in $CsvContent) {
        $Values = $MappingDict.Keys | ForEach-Object {
            $MappedColumn = $MappingDict[$_]
            switch ($MappedColumn) {
                "EffectiveKey" { ($SourceFileName -split '_')[2].Substring(0, 6) }
                "SourceFileName" { "'$($SourceFileName -replace "'", "''")'" }
                default {
                    $Value = $Row.$_ -replace "'", "''"
                    if ($Value -ne "") { "'$Value'" } else { "NULL" }
                }
            }
        }
        $BatchRows += "($($Values -join ','))"

        # Insert batch when size is reached or at the end
        if ($BatchRows.Count -ge $BatchSize -or $BatchRows.Count -eq $CsvContent.Count) {
            $BatchInsertQuery = @"
            INSERT INTO $TargetTable ($ColumnHeaders)
            VALUES
            $($BatchRows -join ",`n");
"@
            try {
                Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $BatchInsertQuery -TrustServerCertificate
                Log_Message "Inserted batch of $($BatchRows.Count) rows for CSV file: $SourceFileName."
            } catch {
                Log_Message "Failed to insert batch for file: $SourceFileName : $_"
            }
            $BatchRows = @()
        }
    }

    # Archive the file
    try {
        Move-Item -Path $FilePath -Destination (Join-Path -Path $ArchivePath -ChildPath $SourceFileName) -Force
        Log_Message "File archived successfully to: $ArchivePath."
    } catch {
        Log_Message "Failed to archive file: $SourceFileName : $_"
    }
}

# Final log
Log_Message "CSV ETL process completed for all files in folder: $FolderPath."
