# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.txt"
$Delimiter = "|"  # Adjust based on your file's delimiter
$DataMappingTable = "dbo.DataMapping"  # Table for mapping information
$TargetTable = "Anthem.MemberShip"  # Table for the target load

# SQL Connection String
$ConnectionString = "Server=$ServerName;Database=$Database;Integrated Security=True;"

# Function to execute SQL query and return results
function Execute-SqlQuery {
    param (
        [string]$query
    )

    try {
        $connection = New-Object System.Data.SqlClient.SqlConnection
        $connection.ConnectionString = $ConnectionString
        $command = $connection.CreateCommand()
        $command.CommandText = $query

        $connection.Open()
        $reader = $command.ExecuteReader()

        # Capture the query results in a DataTable
        $table = New-Object System.Data.DataTable
        $table.Load($reader)

        $connection.Close()
        return $table
    }
    catch {
        Write-Output "Error executing SQL query: $($_.Exception.Message)"
        return $null
    }
}

# Step 1: Fetch Data Mapping
$mappingQuery = "SELECT SourceColumnIndex, TargetColumnName FROM $DataMappingTable WHERE TargetTable = '$TargetTable'"
$columnMappings = Execute-SqlQuery -query $mappingQuery

if (-not $columnMappings) {
    Write-Output "Failed to retrieve column mappings. Exiting script."
    exit
}

# Step 2: Process the Anthem file
if (Test-Path -Path $FilePath) {
    $lines = Get-Content -Path $FilePath
    $insertStatements = @()

    # Skip header and process each line
    foreach ($line in $lines[1..$lines.Length]) {
        $columns = $line -split $Delimiter
        $columnNames = @()
        $values = @()
        
        foreach ($mapping in $columnMappings.Rows) {
            $sourceIndex = [int]$mapping["SourceColumnIndex"]
            $targetColumn = $mapping["TargetColumnName"]

            # Ensure the source index is within the bounds of the columns array
            if ($sourceIndex -lt $columns.Length) {
                $value = $columns[$sourceIndex] -replace "'", "''"  # Escape single quotes
                $columnNames += $targetColumn
                $values += "'$value'"
            }
            else {
                Write-Output "Warning: Source index $sourceIndex out of bounds for line: $line"
            }
        }

        # Construct SQL Insert Statement
        $insertStatement = "INSERT INTO $TargetTable (" + ($columnNames -join ", ") + ") VALUES (" + ($values -join ", ") + ");"
        $insertStatements += $insertStatement
    }

    # Step 3: Insert Data into Target Table
    try {
        $connection = New-Object System.Data.SqlClient.SqlConnection
        $connection.ConnectionString = $ConnectionString
        $connection.Open()
        
        foreach ($statement in $insertStatements) {
            $command = $connection.CreateCommand()
            $command.CommandText = $statement
            if ($command -ne $null) {
                try {
                    $command.ExecuteNonQuery() | Out-Null
                    Write-Output "Inserted: $statement"
                }
                catch {
                    Write-Output "Error inserting data: $($_.Exception.Message)"
                }
            }
            else {
                Write-Output "Error: Command object is null. Check SQL connection and statement syntax."
            }
        }
        
        $connection.Close()
    }
    catch {
        Write-Output "Error with SQL connection or execution: $($_.Exception.Message)"
    }
    
    Write-Output "Data load completed."
} else {
    Write-Output "File not found at path: $FilePath"
}
