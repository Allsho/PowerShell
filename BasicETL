# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.csv"
$PayorName = "Anthem"
$TargetTable = "Anthem.MemberShip"
$LogFile = "C:\path\to\logfile.log"
$BatchSize = 1000  # Number of rows per batch for insertion

# Function to log messages
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO"
    )
    $Timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    $LogMessage = "$Timestamp [$Level] $Message"
    Add-Content -Path $LogFile -Value $LogMessage
}

# Start logging
Write-Log "Script execution started."

# Fetch column mappings for the specified PayorName using SQLCMD
Write-Log "Fetching column mappings for PayorName: $PayorName."
$MappingQuery = @"
SELECT IncomingColumnName, StandardizedColumnName
FROM dbo.DataMapping
WHERE PayorName = '$PayorName';
"@

# Define the command to run SQLCMD
$SqlcmdCommand = "sqlcmd -S $ServerName -d $Database -Q `"$MappingQuery`" -o C:\path\to\output.txt"

# Run the SQLCMD command
try {
    Invoke-Expression $SqlcmdCommand
    Write-Log "Successfully fetched column mappings."
} catch {
    Write-Log "Failed to retrieve column mappings using SQLCMD: $_" -Level "ERROR"
    exit
}

# Read the mappings from the output file generated by SQLCMD
try {
    $Mappings = Get-Content "C:\path\to\output.txt" | ConvertFrom-Csv
    Write-Log "Mappings loaded successfully."
} catch {
    Write-Log "Error loading mappings from output file: $_" -Level "ERROR"
    exit
}

if ($Mappings.Count -eq 0) {
    Write-Log "No mappings found for PayorName: $PayorName. Exiting script." -Level "ERROR"
    exit
}

# Build mapping dictionary
$MappingDict = @{}
foreach ($row in $Mappings) {
    $MappingDict[$row.IncomingColumnName] = $row.StandardizedColumnName
}

# Check if the file exists
if (-not (Test-Path -Path $FilePath)) {
    Write-Log "File not found: $FilePath" -Level "ERROR"
    exit
}

# Load CSV file and prepare for transformation
Write-Log "Loading CSV file: $FilePath."
try {
    $csvContent = Import-Csv -Path $FilePath -Delimiter ',' -Quote '"'
    Write-Log "CSV file loaded successfully."
} catch {
    Write-Log "Error loading CSV file: $_" -Level "ERROR"
    exit
}

# Transform data and insert in batches
Write-Log "Transforming data and preparing for insertion."
$ColumnHeaders = $MappingDict.Values -join ","
$BatchRows = @()
$TotalRowsProcessed = 0

foreach ($row in $csvContent) {
    $Values = @()
    foreach ($IncomingColumn in $MappingDict.Keys) {
        if ($row.PSObject.Properties[$IncomingColumn]) {
            $Value = $row.$IncomingColumn -replace "'", "''"  # Escape single quotes
            $Values += "'$Value'"
        } else {
            $Values += "NULL"
        }
    }
    $BatchRows += "($($Values -join ','))"

    # Insert in batches
    if ($BatchRows.Count -ge $BatchSize) {
        $InsertQuery = @"
INSERT INTO $TargetTable ($ColumnHeaders)
VALUES
$($BatchRows -join ",`n");
"@
        try {
            Invoke-Expression "sqlcmd -S $ServerName -d $Database -Q `"$InsertQuery`""
            $TotalRowsProcessed += $BatchRows.Count
            Write-Log "Inserted batch of $BatchSize rows. Total rows processed: $TotalRowsProcessed."
        } catch {
            Write-Log "Error inserting batch: $_" -Level "ERROR"
        }
        $BatchRows = @()
    }
}

# Insert remaining rows
if ($BatchRows.Count -gt 0) {
    $InsertQuery = @"
INSERT INTO $TargetTable ($ColumnHeaders)
VALUES
$($BatchRows -join ",`n");
"@
    try {
        Invoke-Expression "sqlcmd -S $ServerName -d $Database -Q `"$InsertQuery`""
        $TotalRowsProcessed += $BatchRows.Count
        Write-Log "Inserted final batch of $($BatchRows.Count) rows. Total rows processed: $TotalRowsProcessed."
    } catch {
        Write-Log "Error inserting final batch: $_" -Level "ERROR"
    }
}

Write-Log "Script execution completed. Total rows inserted: $TotalRowsProcessed."
