# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.csv"
$PayorName = "Anthem"
$TargetTable = "Anthem.MemberShip"
$BatchSize = 1000

# Function to log messages
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO"
    )
    $Timestamp = (Get-Date).ToString("yyyy-MM-dd HH:mm:ss")
    Write-Host "$Timestamp [$Level] $Message"
}

# Function to execute a query with sqlcmd
function Execute-SqlCmd {
    param (
        [string]$Query
    )
    $Command = @"
sqlcmd -S $ServerName -d $Database -Q "$Query" -h -1 -W
"@
    try {
        $Output = Invoke-Expression -Command $Command
        return $Output -replace "`r", "" | ForEach-Object { $_.Trim() }
    } catch {
        Write-Log "Error executing query: $Command. $_" -Level "ERROR"
        throw $_
    }
}

# Start logging
Write-Log "Script execution started."

# Fetch column mappings
Write-Log "Fetching column mappings for PayorName: $PayorName."
$MappingQuery = @"
SELECT IncomingColumnName, StandardizedColumnName
FROM dbo.DataMapping
WHERE PayorName = '$PayorName';
"@
try {
    $Mappings = Execute-SqlCmd -Query $MappingQuery
    Write-Log "Successfully fetched column mappings."
} catch {
    Write-Log "Failed to retrieve column mappings: $_" -Level "ERROR"
    exit
}

if ($Mappings.Count -eq 0) {
    Write-Log "No mappings found for PayorName: $PayorName. Exiting script." -Level "ERROR"
    exit
}

# Build mapping dictionary
$MappingDict = @{}
foreach ($row in $Mappings) {
    $Columns = $row -split "\t"
    $MappingDict[$Columns[0]] = $Columns[1]
}

# Check if the file exists
if (-not (Test-Path -Path $FilePath)) {
    Write-Log "File not found: $FilePath" -Level "ERROR"
    exit
}

# Load CSV file
Write-Log "Loading CSV file: $FilePath."
try {
    $csvContent = Import-Csv -Path $FilePath
    Write-Log "CSV file loaded successfully."
} catch {
    Write-Log "Error loading CSV file: $_" -Level "ERROR"
    exit
}

# Validate Mapping Against CSV Columns
$CsvColumns = $csvContent[0].PSObject.Properties.Name
$MappedColumns = $MappingDict.Keys
$UnmappedColumns = $CsvColumns | Where-Object { -not $MappedColumns.Contains($_) }

if ($UnmappedColumns.Count -gt 0) {
    Write-Log "Warning: Unmapped columns found in CSV: $($UnmappedColumns -join ', '). These will be ignored."
}

# Prepare for data transformation and insertion
$BatchRows = @()
$TotalRowsProcessed = 0

foreach ($row in $csvContent) {
    $Values = @()
    foreach ($IncomingColumn in $MappingDict.Keys) {
        if ($row.PSObject.Properties[$IncomingColumn]) {
            $Value = $row.$IncomingColumn -replace "'", "''"  # Escape single quotes
            $Values += "'$Value'"
        } else {
            $Values += "NULL"
        }
    }

    # Add only valid rows to the batch
    if ($Values -join ',' -notmatch "^NULL,") {
        $BatchRows += "($($Values -join ','))"
    } else {
        Write-Log "Skipping empty or invalid row."
    }

    # Insert in batches
    if ($BatchRows.Count -ge $BatchSize) {
        $InsertQuery = @"
INSERT INTO $TargetTable ($($MappingDict.Values -join ','))
VALUES
$($BatchRows -join ",`n");
"@
        try {
            Execute-SqlCmd -Query $InsertQuery
            $TotalRowsProcessed += $BatchRows.Count
            Write-Log "Inserted batch of $BatchSize rows. Total rows processed: $TotalRowsProcessed."
        } catch {
            Write-Log "Error inserting batch: $_" -Level "ERROR"
        }
        $BatchRows = @()
    }
}

# Insert remaining rows
if ($BatchRows.Count -gt 0) {
    $InsertQuery = @"
INSERT INTO $TargetTable ($($MappingDict.Values -join ','))
VALUES
$($BatchRows -join ",`n");
"@
    try {
        Execute-SqlCmd -Query $InsertQuery
        $TotalRowsProcessed += $BatchRows.Count
        Write-Log "Inserted final batch of $BatchRows.Count rows. Total rows processed: $TotalRowsProcessed."
    } catch {
        Write-Log "Error inserting final batch: $_" -Level "ERROR"
    }
}

Write-Log "Script execution completed. Total rows inserted: $TotalRowsProcessed."
