# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.txt"
$Delimiter = "|"  # Adjust based on your file's delimiter
$DataMappingTable = "dbo.DataMapping"  # Table for mapping information
$TargetTable = "Anthem.MemberShip"  # Target table for data load

# Fetching Column Mappings Using sqlcmd
$MappingResults = & sqlcmd -S $ServerName -d $Database -Q "SELECT SourceColumnIndex, TargetColumnName FROM $DataMappingTable WHERE TargetTable = '$TargetTable'" -W -s"," | Out-String
$MappingLines = $MappingResults -split "`r?`n" | Where-Object { $_ -match "," }

# Ensure mappings were retrieved
if (-not $MappingLines) {
    Write-Output "Failed to retrieve column mappings. Exiting script."
    exit
}

# Parse the mapping results into a dictionary
$Mappings = @{}
foreach ($line in $MappingLines) {
    $parts = $line -split ","
    if ($parts.Count -eq 2) {
        $SourceIndex = [int]$parts[0].Trim()
        $TargetColumn = $parts[1].Trim()
        $Mappings[$SourceIndex] = $TargetColumn
    }
}

# Step 2: Process the Anthem file and create SQL statements
if (Test-Path -Path $FilePath) {
    $lines = Get-Content -Path $FilePath
    $sqlStatements = @()

    # Skip header and process each line
    foreach ($line in $lines[1..$lines.Length]) {
        $columns = $line -split $Delimiter
        $columnNames = @()
        $values = @()

        foreach ($sourceIndex in $Mappings.Keys) {
            $targetColumn = $Mappings[$sourceIndex]

            # Ensure the source index is within the bounds of the columns array
            if ($sourceIndex -lt $columns.Length) {
                $value = $columns[$sourceIndex] -replace "'", "''"  # Escape single quotes
                $columnNames += $targetColumn
                $values += "'$value'"
            }
        }

        # Construct SQL Insert Statement
        $sqlStatement = "INSERT INTO $TargetTable (" + ($columnNames -join ", ") + ") VALUES (" + ($values -join ", ") + ");"
        $sqlStatements += $sqlStatement
    }

    # Step 3: Write SQL Statements to a Temporary SQL File
    $tempSqlFile = "$env:TEMP\InsertStatements.sql"
    $sqlStatements -join "`n" | Set-Content -Path $tempSqlFile -Force

    # Step 4: Execute the SQL File using sqlcmd
    try {
        & sqlcmd -S $ServerName -d $Database -i $tempSqlFile
        Write-Output "Data load completed."
    }
    catch {
        Write-Output "Error inserting data: $($_.Exception.Message)"
    }
    
    # Clean up
    Remove-Item -Path $tempSqlFile -Force
} else {
    Write-Output "File not found at path: $FilePath"
}
