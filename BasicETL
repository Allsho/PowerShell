# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.csv"
$PayorName = "Anthem"
$TargetTable = "Anthem.MemberShip"

# Fetch mappings for the specified PayorName
$MappingQuery = "SELECT IncomingColumnName, StandardizedColumnName FROM dbo.DataMapping WHERE PayorName = '$PayorName'"
$MappingResults = & sqlcmd -S $ServerName -d $Database -Q $MappingQuery -W -s"," | Out-String
$MappingLines = $MappingResults -split "`r?`n" | Where-Object { $_ -match "," }

if (-not $MappingLines) {
    Write-Output "Failed to retrieve column mappings for PayorName: $PayorName. Exiting script."
    exit
}

# Parse mappings into a dictionary
$Mappings = @{}
foreach ($line in $MappingLines) {
    $parts = $line -split ","
    if ($parts.Count -eq 2) {
        $IncomingColumn = $parts[0].Trim()
        $StandardizedColumn = $parts[1].Trim()
        $Mappings[$IncomingColumn] = $StandardizedColumn
    }
}

# Check if file exists
if (Test-Path -Path $FilePath) {
    $csvContent = Import-Csv -Path $FilePath -Delimiter ','

    # Detect if the CSV file has a single column or multiple columns
    $isSingleColumn = ($csvContent[0].PSObject.Properties.Count -eq 1)
    $batchSize = 100
    $rowBatch = @()
    $columnNames = ($Mappings.Values -join ", ")

    foreach ($row in $csvContent) {
        $values = @()
        
        if ($isSingleColumn) {
            $value = $row.PSObject.Properties[0].Value -replace "'", "''" # Escape single quotes
            foreach ($TargetColumnName in $Mappings.Values) {
                $values += "'$value'"
            }
        } else {
            foreach ($IncomingColumnName in $Mappings.Keys) {
                $value = $row.$IncomingColumnName -replace "'", "''" # Escape single quotes
                $values += "'$value'"
            }
        }

        $rowBatch += "(" + ($values -join ", ") + ")"

        if ($rowBatch.Count -ge $batchSize) {
            $sqlStatement = "INSERT INTO $TargetTable ($columnNames) VALUES " + ($rowBatch -join ", ")
            Write-Output "Executing SQL: $sqlStatement"  # Diagnostic output

            try {
                & sqlcmd -S $ServerName -d $Database -Q $sqlStatement
                Write-Output "Inserted batch of data successfully."
            } catch {
                Write-Output "Error inserting data: $_"
            }
            $rowBatch.Clear()
        }
    }

    if ($rowBatch.Count -gt 0) {
        $sqlStatement = "INSERT INTO $TargetTable ($columnNames) VALUES " + ($rowBatch -join ", ")
        Write-Output "Executing Final SQL: $sqlStatement"  # Diagnostic output

        try {
            & sqlcmd -S $ServerName -d $Database -Q $sqlStatement
            Write-Output "Inserted final batch of data successfully."
        } catch {
            Write-Output "Error inserting final batch: $_"
        }
    }
} else {
    Write-Output "File not found: $FilePath"
}
