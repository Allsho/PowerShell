# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.txt"
$Delimiter = "|"  # Adjust based on your file's delimiter
$DataMappingTable = "dbo.DataMapping"  # Table for mapping information
$TargetTable = "Anthem.MemberShip"  # Target table for data load

# Build the Connection String
$ConnectionString = "Provider=SQLOLEDB;Data Source=$ServerName;Initial Catalog=$Database;Integrated Security=SSPI;"

# Function to execute SQL queries using OLE DB
function Execute-OleDbQuery {
    param (
        [string]$query
    )
    try {
        # Create OLE DB connection and command objects
        $conn = [System.Data.OleDb.OleDbConnection]::new($ConnectionString)
        $conn.Open()
        $cmd = $conn.CreateCommand()
        $cmd.CommandText = $query
        
        # Execute query and capture results
        $adapter = New-Object System.Data.OleDb.OleDbDataAdapter $cmd
        $dataSet = New-Object System.Data.DataSet
        $adapter.Fill($dataSet) | Out-Null
        $conn.Close()
        
        return $dataSet.Tables[0]
    }
    catch {
        Write-Output "Error executing SQL query: $($_.Exception.Message)"
        return $null
    }
}

# Step 1: Fetch Data Mapping
$mappingQuery = "SELECT SourceColumnIndex, TargetColumnName FROM $DataMappingTable WHERE TargetTable = '$TargetTable'"
$columnMappings = Execute-OleDbQuery -query $mappingQuery

if (-not $columnMappings) {
    Write-Output "Failed to retrieve column mappings. Exiting script."
    exit
}

# Step 2: Process the Anthem file
if (Test-Path -Path $FilePath) {
    $lines = Get-Content -Path $FilePath
    $insertStatements = @()

    # Skip header and process each line
    foreach ($line in $lines[1..$lines.Length]) {
        $columns = $line -split $Delimiter
        $columnNames = @()
        $values = @()
        
        foreach ($mapping in $columnMappings.Rows) {
            $sourceIndex = [int]$mapping["SourceColumnIndex"]
            $targetColumn = $mapping["TargetColumnName"]

            # Ensure the source index is within the bounds of the columns array
            if ($sourceIndex -lt $columns.Length) {
                $value = $columns[$sourceIndex] -replace "'", "''"  # Escape single quotes
                $columnNames += $targetColumn
                $values += "'$value'"
            }
            else {
                Write-Output "Warning: Source index $sourceIndex out of bounds for line: $line"
            }
        }

        # Construct SQL Insert Statement
        $insertStatement = "INSERT INTO $TargetTable (" + ($columnNames -join ", ") + ") VALUES (" + ($values -join ", ") + ");"
        $insertStatements += $insertStatement
    }

    # Step 3: Insert Data into Target Table using OLE DB
    foreach ($statement in $insertStatements) {
        try {
            $conn = [System.Data.OleDb.OleDbConnection]::new($ConnectionString)
            $conn.Open()
            $cmd = $conn.CreateCommand()
            $cmd.CommandText = $statement
            $cmd.ExecuteNonQuery() | Out-Null
            $conn.Close()

            Write-Output "Inserted: $statement"
        }
        catch {
            Write-Output "Error inserting data: $($_.Exception.Message)"
        }
    }

    Write-Output "Data load completed."
} else {
    Write-Output "File not found at path: $FilePath"
}
