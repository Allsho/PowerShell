# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.csv"
$PayorName = "Anthem"
$TargetTable = "Anthem.MemberShip"

# Fetch mappings for the specified PayorName
$MappingQuery = "SELECT IncomingColumnName, StandardizedColumnName FROM dbo.DataMapping WHERE PayorName = '$PayorName'"
$MappingResults = & sqlcmd -S $ServerName -d $Database -Q $MappingQuery -W -s"," | Out-String
$MappingLines = $MappingResults -split "`r?`n" | Where-Object { $_ -match "," }

if (-not $MappingLines) {
    Write-Output "Failed to retrieve column mappings for PayorName: $PayorName. Exiting script."
    exit
}

# Parse mappings into a dictionary
$Mappings = @{}
foreach ($line in $MappingLines) {
    $parts = $line -split ","
    if ($parts.Count -eq 2) {
        $IncomingColumn = $parts[0].Trim()
        $StandardizedColumn = $parts[1].Trim()
        $Mappings[$IncomingColumn] = $StandardizedColumn
    }
}

# Check if file exists
if (Test-Path -Path $FilePath) {
    # Import the CSV file (no need for -Quote parameter, it's handled by Import-Csv)
    $csvContent = Import-Csv -Path $FilePath -Delimiter ','

    $sqlStatements = @()

    # Accumulate multiple rows into one INSERT statement
    $rowBatch = @()
    $batchSize = 100  # Adjust batch size as needed for optimal performance

    # Loop through each row in the CSV
    foreach ($row in $csvContent) {
        $columnNames = @()
        $values = @()

        # Loop through each column in the row
        foreach ($IncomingColumnName in $Mappings.Keys) {
            $StandardizedColumnName = $Mappings[$IncomingColumnName]

            # Check if the IncomingColumnName exists in the row
            if ($row.PSObject.Properties[$IncomingColumnName]) {
                $value = $row.$IncomingColumnName
                $columnNames += "[$StandardizedColumnName]"
                $values += "'$value'"
            }
        }

        # Add the current row's values to the batch
        $rowBatch += "(" + ($values -join ", ") + ")"

        # If batch size is reached, insert the batch
        if ($rowBatch.Count -ge $batchSize) {
            $sqlStatement = "INSERT INTO $TargetTable (" + ($columnNames -join ", ") + ") VALUES " + ($rowBatch -join ", ")
            $sqlStatements += $sqlStatement
            $rowBatch.Clear()  # Clear the batch after insertion
        }
    }

    # Insert any remaining rows that didn't fill up the batch
    if ($rowBatch.Count -gt 0) {
        $sqlStatement = "INSERT INTO $TargetTable (" + ($columnNames -join ", ") + ") VALUES " + ($rowBatch -join ", ")
        $sqlStatements += $sqlStatement
    }

    # Execute the batched SQL statements
    foreach ($sqlStatement in $sqlStatements) {
        try {
            & sqlcmd -S $ServerName -d $Database -Q $sqlStatement
            Write-Output "Inserted batch of data successfully."
        } catch {
            Write-Output "Error inserting data: $_"
        }
    }
} else {
    Write-Output "File not found: $FilePath"
}
