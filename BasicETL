# ========================================== 
# CSV ETL Script for SQL Server with Archiving (Optimized)
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing CSV files to process
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable
$BatchSize = 100                              # Maximum number of rows to insert per query

# Function: Log a message to the database
function Log_Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogQuery = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES ('$Timestamp', '$PayorName', '$Message');
"@
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $LogQuery -TrustServerCertificate
    } catch {
        Write-Host "Failed to log message to database: $_"
    }
}

# Process files in the folder
$Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
if ($Files.Count -eq 0) {
    Write-Host "No CSV files found in folder: $FolderPath"
    exit
}

foreach ($File in $Files) {
    $FilePath = $File.FullName
    $SourceFileName = $File.Name

    # Fetch table mapping for CSV files only
    $TableMappingQuery = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    try {
        $TableMapping = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TableMappingQuery -TrustServerCertificate
        if ($TableMapping.Count -eq 0) {
            Log_Message "No table mapping found for CSV file: $SourceFileName."
            continue
        }
        $PayorName = $TableMapping.PayorName
        $TargetTable = $TableMapping.TargetTable
        $ArchiveBasePath = $TableMapping.ArchivePath
        Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."
    } catch {
        Log_Message "Failed to retrieve table mapping for CSV file: $SourceFileName : $_"
        continue
    }

    # Determine archive folder path
    $CurrentYearMonth = (Get-Date).ToString("yyyyMM")
    $ArchivePath = Join-Path -Path $ArchiveBasePath -ChildPath $CurrentYearMonth

    # Create archive folder if it doesn't exist
    if (-not (Test-Path -Path $ArchivePath)) {
        try {
            New-Item -ItemType Directory -Path $ArchivePath -Force | Out-Null
            Log_Message "Created archive folder: $ArchivePath."
        } catch {
            Log_Message "Failed to create archive folder: $ArchivePath : $_"
            continue
        }
    }

    # Truncate target table
    $TruncateQuery = "TRUNCATE TABLE $TargetTable;"
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TruncateQuery -TrustServerCertificate
        Log_Message "Staging table $TargetTable truncated successfully."
    } catch {
        Log_Message "Failed to truncate table $TargetTable : $_"
        continue
    }

    # Fetch column mappings
    $MappingQuery = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    try {
        $Mappings = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $MappingQuery -TrustServerCertificate
        if ($Mappings.Count -eq 0) {
            Log_Message "No column mappings found for PayorName: $PayorName."
            continue
        }
        Log_Message "Fetched column mappings successfully for PayorName: $PayorName."
    } catch {
        Log_Message "Failed to retrieve column mappings: $_"
        continue
    }

    # Build column mapping pipeline
    $AlignedColumns = @{}

    if ($CsvContent[0]) {
        foreach ($Mapping in $Mappings) {
            if ($CsvContent[0].PSObject.Properties[$Mapping.IncomingColumnName]) {
                $AlignedColumns[$Mapping.IncomingColumnName] = $Mapping.StandardizedColumnName
            }
        }
    } else {
        Log_Message "Failed to align columns due to missing or invalid headers in $SourceFileName."
        continue
    }

    # Load and transform CSV content
    try {
        $CsvContent = Import-Csv -Path $FilePath -Delimiter ',' #-Quote '"'
    
        # Check if CSV is empty or improperly formatted
        if (-not $CsvContent -or $CsvContent.Count -eq 0) {
            Log_Message "CSV file $FilePath is empty or has no rows. Skipping."
            continue
        }
        
        # Verify headers exist
        if (-not $CsvContent[0].PSObject.Properties.Name) {
            Log_Message "CSV file $FilePath is improperly formatted or missing headers. Skipping."
            continue
        }
        
        # Add SourceFileName to all rows
        $CsvContent | ForEach-Object { $_.SourceFileName = $SourceFileName }
        Log_Message "Loaded CSV file: $SourceFileName successfully with $($CsvContent.Count) rows."
    } catch {
        Log_Message "Error processing CSV file $SourceFileName $_"
        continue
    }

    # Prepare headers for insertion
    $ColumnHeaders = ($AlignedColumns.Values | ForEach-Object { "[$_]" }) -join ","
    $RowCounter = 0
    $BatchRows = @()

    foreach ($Row in $CsvContent) {
        $Values = $AlignedColumns.Keys | ForEach-Object {
            $Value = $Row.$_ -replace "'", "''"
            if ($Value -ne "") { "'$Value'" } else { "NULL" }
        }
        $BatchRows += "($($Values -join ','))"
        $RowCounter++

        if ($RowCounter % $BatchSize -eq 0 -or $RowCounter -eq $CsvContent.Count) {
            $BatchInsertQuery = @"
            INSERT INTO $TargetTable ($ColumnHeaders)
            VALUES
            $($BatchRows -join ",`n");
"@
            try {
                Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $BatchInsertQuery -TrustServerCertificate
                Log_Message "Inserted batch of $($BatchRows.Count) rows for CSV file: $SourceFileName."
            } catch {
                Log_Message "Failed to insert batch for file: $SourceFileName : $_"
            }
            $BatchRows = @()
        }
    }

    # Archive the file
    $ArchiveFilePath = Join-Path -Path $ArchivePath -ChildPath $SourceFileName
    try {
        Move-Item -Path $FilePath -Destination $ArchiveFilePath -Force
        Log_Message "File archived successfully to: $ArchiveFilePath."
    } catch {
        Log_Message "Failed to archive file: $SourceFileName to $ArchiveFilePath : $_"
    }
}

# Final log
Log_Message "CSV ETL process completed for all files in folder: $FolderPath."



# Load and transform CSV content
try {
    $CsvContent = Import-Csv -Path $FilePath -Delimiter ','
    
    # Check if CSV is empty or improperly formatted
    if (-not $CsvContent -or $CsvContent.Count -eq 0) {
        Log_Message "CSV file $FilePath is empty or has no rows. Skipping."
        continue
    }

    # Verify headers exist
    if (-not $CsvContent[0].PSObject.Properties.Name) {
        Log_Message "CSV file $FilePath is improperly formatted or missing headers. Skipping."
        continue
    }

    # Build column mapping pipeline only if CSV loaded successfully
    $AlignedColumns = @{}
    foreach ($Mapping in $Mappings) {
        if ($CsvContent[0].PSObject.Properties[$Mapping.IncomingColumnName]) {
            $AlignedColumns[$Mapping.IncomingColumnName] = $Mapping.StandardizedColumnName
        }
    }
} catch {
    Log_Message "Error processing CSV file $SourceFileName: $_"
    continue
}

$TableMappingQuery = @"
SELECT PayorName, TargetTable, FilePattern, ArchivePath
FROM $TableMappingTable
WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
try {
    $TableMapping = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TableMappingQuery -Variable @{ SourceFileName = $SourceFileName } -TrustServerCertificate
    if ($TableMapping.Count -eq 0) {
        Log_Message "No table mapping found for CSV file: $SourceFileName."
        continue
    }
    $PayorName = $TableMapping.PayorName
    $TargetTable = $TableMapping.TargetTable
    $ArchiveBasePath = $TableMapping.ArchivePath
    Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."
} catch {
    Log_Message "Failed to retrieve table mapping for CSV file: $SourceFileName : $_"
    continue
}

