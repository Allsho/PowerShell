# Configuration
$ServerName = "YourServerName"
$Database = "YourDatabase"
$FilePath = "C:\path\to\your\anthemfile.csv"
$PayorName = "Anthem"
$TargetTable = "Anthem.MemberShip"
$LogFile = "C:\path\to\your\etl_log.txt"

# Extract just the file name from the full file path
$SourceFileName = Split-Path -Path $FilePath -Leaf

# Log a message to the file
function Log-Message {
    param (
        [string]$Message
    )
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $LogFile -Value "$Timestamp - $Message"
}

# Start logging
Log-Message "ETL process started for PayorName: $PayorName."

# Fetch mappings for the specified PayorName using Invoke-SqlCmd
$MappingQuery = @"
SELECT IncomingColumnName, StandardizedColumnName
FROM dbo.DataMapping
WHERE PayorName = '$PayorName';
"@

try {
    $Mappings = Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $MappingQuery
    Log-Message "Fetched column mappings successfully."
} catch {
    Log-Message "Failed to retrieve column mappings: $_"
    exit
}

if ($Mappings.Count -eq 0) {
    Log-Message "No mappings found for PayorName: $PayorName. Exiting script."
    exit
}

# Build mapping dictionary
$MappingDict = @{}
foreach ($row in $Mappings) {
    $MappingDict[$row.IncomingColumnName] = $row.StandardizedColumnName
}
Log-Message "Mapping dictionary created with keys: $($MappingDict.Keys -join ', ')."

# Check if file exists
if (-not (Test-Path -Path $FilePath)) {
    Log-Message "File not found: $FilePath"
    exit
}

# Load CSV file and transform data
try {
    $csvContent = Import-Csv -Path $FilePath -Delimiter ',' -Quote '"'
    Log-Message "Loaded CSV file successfully with $($csvContent.Count) rows."
} catch {
    Log-Message "Failed to load CSV file: $_"
    exit
}

$TransformedRows = @()

foreach ($row in $csvContent) {
    $Values = @()
    foreach ($IncomingColumn in $MappingDict.Keys) {
        if ($MappingDict[$IncomingColumn] -eq "GETDATE()") {
            # Handle EffectiveKey
            $Values += $MappingDict[$IncomingColumn]
        } elseif ($MappingDict[$IncomingColumn] -eq "<SourceFileName>") {
            # Handle SourceFileName
            $Values += "'$($SourceFileName -replace "'", "''")'"
        } elseif ($row.PSObject.Properties[$IncomingColumn]) {
            # Map normal columns
            $Value = $row.$IncomingColumn -replace "'", "''"  # Escape single quotes
            $Values += "'$Value'"
        } else {
            # Handle missing values as NULL
            $Values += "NULL"
        }
    }
    $TransformedRows += "($($Values -join ','))"
}

if ($TransformedRows.Count -eq 0) {
    Log-Message "No data to insert. Exiting script."
    exit
}

# Build bulk insert query dynamically
$ColumnHeaders = $MappingDict.Values -join ","  # Include all mapped columns
$InsertQuery = @"
INSERT INTO $TargetTable ($ColumnHeaders)
VALUES
$($TransformedRows -join ",`n");
"@

# Insert data into the database
try {
    Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $InsertQuery
    Log-Message "Data inserted successfully into $TargetTable."
} catch {
    Log-Message "Error inserting data: $_"
}
Log-Message "ETL process completed for PayorName: $PayorName."
