# ==========================================
# CSV ETL Script for SQL Server with SQL Bulk Copy and Archiving
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing files to process
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable
$BatchSize = 1000

# Function: Initialize database connection
function Initialize-DatabaseConnection {
    param ([string]$ServerName, [string]$Database)
    $Connection = New-Object System.Data.SqlClient.SqlConnection
    $Connection.ConnectionString = "Server=$ServerName;Database=$Database;Integrated Security=True;TrustServerCertificate=True;"
    $Connection.Open()
    return $Connection
}

# Function: Log a message to the database
function Log-Message {
    param (
        [System.Data.SqlClient.SqlConnection]$Connection,
        [string]$Message,
        [string]$PayorName = $null
    )
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $Cmd = $Connection.CreateCommand()
    $Cmd.CommandText = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES (@Timestamp, @PayorName, @Message);
"@
    $Cmd.Parameters.AddWithValue("@Timestamp", $Timestamp)
    $Cmd.Parameters.AddWithValue("@PayorName", $PayorName)
    $Cmd.Parameters.AddWithValue("@Message", $Message)
    $Cmd.ExecuteNonQuery()
}

# Function: Fetch SQL Query Results
function Execute-SqlQuery {
    param (
        [System.Data.SqlClient.SqlConnection]$Connection,
        [string]$Query
    )
    $Cmd = $Connection.CreateCommand()
    $Cmd.CommandText = $Query
    $Adapter = New-Object System.Data.SqlClient.SqlDataAdapter $Cmd
    $DataTable = New-Object System.Data.DataTable
    $Adapter.Fill($DataTable) | Out-Null
    return $DataTable
}

# Function: Archive a file
function Archive-File {
    param ([string]$FilePath, [string]$ArchiveBasePath)
    $ArchivePath = Join-Path -Path $ArchiveBasePath -ChildPath (Get-Date -Format "yyyyMM")
    if (-not (Test-Path -Path $ArchivePath)) {
        New-Item -ItemType Directory -Path $ArchivePath | Out-Null
    }
    $ArchiveFilePath = Join-Path -Path $ArchivePath -ChildPath (Split-Path -Leaf $FilePath)
    Move-Item -Path $FilePath -Destination $ArchiveFilePath -Force
    return $ArchiveFilePath
}

# Function: Process a CSV file
function Process-File {
    param (
        [System.Data.SqlClient.SqlConnection]$Connection,
        [string]$FilePath,
        [string]$SourceFileName
    )
    # Fetch table mapping
    $TableMappingQuery = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    $TableMapping = Execute-SqlQuery -Connection $Connection -Query $TableMappingQuery
    if ($TableMapping.Rows.Count -eq 0) {
        Log-Message -Connection $Connection -Message "No table mapping found for CSV file: $SourceFileName."
        return
    }
    $PayorName = $TableMapping.Rows[0]["PayorName"]
    $TargetTable = $TableMapping.Rows[0]["TargetTable"]
    $ArchiveBasePath = $TableMapping.Rows[0]["ArchivePath"]
    Log-Message -Connection $Connection -Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable." -PayorName $PayorName

    # Truncate the target table
    $TruncateQuery = "TRUNCATE TABLE $TargetTable;"
    Execute-SqlQuery -Connection $Connection -Query $TruncateQuery
    Log-Message -Connection $Connection -Message "Staging table $TargetTable truncated successfully." -PayorName $PayorName

    # Fetch column mappings
    $MappingQuery = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    $Mappings = Execute-SqlQuery -Connection $Connection -Query $MappingQuery
    if ($Mappings.Rows.Count -eq 0) {
        Log-Message -Connection $Connection -Message "No column mappings found for PayorName: $PayorName."
        return
    }
    Log-Message -Connection $Connection -Message "Fetched column mappings successfully for PayorName: $PayorName." -PayorName $PayorName

    # Perform Bulk Copy
    $BulkCopy = New-Object Data.SqlClient.SqlBulkCopy($Connection)
    $BulkCopy.DestinationTableName = $TargetTable
    $BulkCopy.BatchSize = $BatchSize
    foreach ($MappingRow in $Mappings.Rows) {
        $BulkCopy.ColumnMappings.Add($MappingRow["IncomingColumnName"], $MappingRow["StandardizedColumnName"])
    }
    $TextFieldParser = New-Object Microsoft.VisualBasic.FileIO.TextFieldParser($FilePath)
    $TextFieldParser.TextFieldType = [Microsoft.VisualBasic.FileIO.FieldType]::Delimited
    $TextFieldParser.SetDelimiters(',')

    $Headers = $TextFieldParser.ReadFields()
    $DataTable = New-Object System.Data.DataTable
    foreach ($Header in $Headers) {
        $DataTable.Columns.Add($Header) | Out-Null
    }

    while (-not $TextFieldParser.EndOfData) {
        $Row = $DataTable.NewRow()
        $Row.ItemArray = $TextFieldParser.ReadFields()
        $DataTable.Rows.Add($Row)
    }

    $TextFieldParser.Close()
    $BulkCopy.WriteToServer($DataTable)
    $BulkCopy.Close()
    Log-Message -Connection $Connection -Message "Bulk copy completed for file: $SourceFileName." -PayorName $PayorName

    # Archive the file
    $ArchivedPath = Archive-File -FilePath $FilePath -ArchiveBasePath $ArchiveBasePath
    Log-Message -Connection $Connection -Message "File archived successfully to: $ArchivedPath." -PayorName $PayorName
}

# Main Script Execution
$Connection = Initialize-DatabaseConnection -ServerName $ServerName -Database $Database
try {
    $Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
    if ($Files.Count -eq 0) {
        Write-Host "No CSV files found in folder: $FolderPath"
        Log-Message -Connection $Connection -Message "No CSV files found in folder: $FolderPath."
        exit
    }

    foreach ($File in $Files) {
        Process-File -Connection $Connection -FilePath $File.FullName -SourceFileName $File.Name
    }
} finally {
    $Connection.Close()
}

# Final log
Log-Message -Connection $Connection -Message "CSV ETL process completed for all files in folder: $FolderPath."
