# ==========================================
# Modular CSV ETL Script for SQL Server with SQL Bulk Copy and Archiving
# ==========================================

# Configuration
$ServerName = ""                              # SQL Server name or IP address
$Database = "ClaimsStage"                     # Database to store the data
$FolderPath = ""                              # Directory containing files to process
$DataMappingTable = "ETL.Claim_Data_Mapping"  # Table containing column mappings
$TableMappingTable = "ETL.Table_Mapping"      # Table mapping FilePattern to TargetTable
$BatchSize = 1000
Add-Type -AssemblyName 'Microsoft.VisualBasic'

# Function: Log a message to the database
function Log_Message {
    param ([string]$Message)
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogQuery = @"
    INSERT INTO ETL.Payor_Log (Timestamp, PayorName, LogMessage)
    VALUES ('$Timestamp', '$PayorName', '$Message');
"@
    try {
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $LogQuery -TrustServerCertificate
    } catch {
        Write-Host "Failed to log message to database: $_"
    }
}

# Function: Get table mapping for a CSV file
function Get_Table_Mapping {
    param ([string]$SourceFileName)
    $TableMappingQuery = @"
    SELECT PayorName, TargetTable, FilePattern, ArchivePath
    FROM $TableMappingTable
    WHERE FileType = 'CSV' AND '$SourceFileName' LIKE REPLACE(FilePattern, '*', '%');
"@
    return Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $TableMappingQuery -TrustServerCertificate
}

# Function: Get column mappings for a PayorName
function Get_Column_Mappings {
    param ([string]$PayorName)
    $MappingQuery = @"
    SELECT IncomingColumnName, StandardizedColumnName
    FROM $DataMappingTable
    WHERE PayorName = '$PayorName';
"@
    return Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query $MappingQuery -TrustServerCertificate
}

# Function: Initialize DataTable from CSV headers
function Initialize_DataTable {
    param ([string[]]$Headers, [string]$SourceFileName)
    $DataTable = New-Object System.Data.DataTable
    foreach ($Header in $Headers) {
        $Column = New-Object System.Data.DataColumn $Header
        $DataTable.Columns.Add($Column)
    }
    $SourceFileNameColumn = New-Object System.Data.DataColumn("SourceFileName")
    $DataTable.Columns.Add($SourceFileNameColumn)
    return $DataTable
}

# Function: Archive file
function Archive_File {
    param ([string]$FilePath, [string]$ArchiveBasePath, [string]$SourceFileName)
    $ArchivePath = Join-Path -Path $ArchiveBasePath -ChildPath (Get-Date -Format "yyyyMM")
    if (-not (Test-Path -Path $ArchivePath)) {
        New-Item -ItemType Directory -Path $ArchivePath | Out-Null
    }
    $ArchiveFilePath = Join-Path -Path $ArchivePath -ChildPath $SourceFileName
    Move-Item -Path $FilePath -Destination $ArchiveFilePath -Force
    return $ArchiveFilePath
}

# Main Function: Process a single CSV file
function Process_CSV_File {
    param ([string]$FilePath, [string]$SourceFileName)

    try {
        $TableMapping = Get_Table_Mapping -SourceFileName $SourceFileName
        if ($TableMapping.Count -eq 0) {
            Log_Message "No table mapping found for CSV file: $SourceFileName."
            return
        }
        $PayorName = $TableMapping.PayorName
        $TargetTable = $TableMapping.TargetTable
        $ArchiveBasePath = $TableMapping.ArchivePath
        Log_Message "Mapping found for file: $SourceFileName, $PayorName targeting table: $TargetTable."

        # Truncate target table
        Invoke-SqlCmd -ServerInstance $ServerName -Database $Database -Query "TRUNCATE TABLE $TargetTable;" -TrustServerCertificate
        Log_Message "Staging table $TargetTable truncated successfully."

        $Mappings = Get_Column_Mappings -PayorName $PayorName
        if ($Mappings.Count -eq 0) {
            Log_Message "No column mappings found for PayorName: $PayorName."
            return
        }
        Log_Message "Fetched column mappings successfully for PayorName: $PayorName."

        # Bulk Copy and Load CSV Data
        $SqlConnection = New-Object System.Data.SqlClient.SqlConnection("Server=$ServerName;Database=$Database;Integrated Security=True;TrustServerCertificate=True;")
        $SqlConnection.Open()
        $BulkCopy = New-Object Data.SqlClient.SqlBulkCopy($SqlConnection)
        $BulkCopy.DestinationTableName = $TargetTable
        $BulkCopy.BatchSize = $BatchSize
        $BulkCopy.ColumnMappings.Add("SourceFileName", "SourceFileName")
        foreach ($Mapping in $Mappings) {
            $BulkCopy.ColumnMappings.Add($Mapping.IncomingColumnName, $Mapping.StandardizedColumnName)
        }

        $TextFieldParser = New-Object Microsoft.VisualBasic.FileIO.TextFieldParser($FilePath)
        $TextFieldParser.TextFieldType = [Microsoft.VisualBasic.FileIO.FieldType]::Delimited
        $TextFieldParser.SetDelimiters(',')
        $Headers = $TextFieldParser.ReadFields()
        $DataTable = Initialize_DataTable -Headers $Headers -SourceFileName $SourceFileName

        while (-not $TextFieldParser.EndOfData) {
            $Fields = $TextFieldParser.ReadFields()
            $Row = $DataTable.NewRow()
            $Row.ItemArray = $Fields
            $Row["SourceFileName"] = $SourceFileName
            $DataTable.Rows.Add($Row)
        }
        $TextFieldParser.Close()
        $BulkCopy.WriteToServer($DataTable)
        Log_Message "Bulk copy completed for file: $SourceFileName."

        $BulkCopy.Close()
        $SqlConnection.Close()

        # Archive the file
        $ArchiveFilePath = Archive_File -FilePath $FilePath -ArchiveBasePath $ArchiveBasePath -SourceFileName $SourceFileName
        Log_Message "File archived successfully to: $ArchiveFilePath."

    } catch {
        Log_Message "Error processing file $SourceFileName : $_"
    }
}

# Process all files in the folder
function Process_All_Files {
    $Files = Get-ChildItem -Path $FolderPath -Filter "*.csv"
    if ($Files.Count -eq 0) {
        Write-Host "No CSV files found in folder: $FolderPath"
        exit
    }
    foreach ($File in $Files) {
        Process_CSV_File -FilePath $File.FullName -SourceFileName $File.Name
    }
    Log_Message "CSV ETL process completed for all files in folder: $FolderPath."
}

# Run the ETL process
Process_All_Files
